"""
Django settings for kapadiaschool project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv
from decouple import config

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-5u@dx-_uxrvvj$%)$@bi!$w15a+$hi@^l-9i##lspe(rgr28jj')

# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG based on environment variable
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# Configure hosts for Render deployment
ALLOWED_HOSTS = ['localhost', '127.0.0.1','kapadiahighschool.com']

# Configure RENDER_EXTERNAL_HOSTNAME for Render
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Add Render internal and external domains
RENDER_EXTERNAL_URL = os.environ.get('RENDER_EXTERNAL_URL')
if RENDER_EXTERNAL_URL:
    ALLOWED_HOSTS.extend([RENDER_EXTERNAL_URL, f'*.{RENDER_EXTERNAL_URL}'])

# In production, allow the Render assigned domain
ALLOWED_HOSTS.extend(['.com'])

# CSRF Trusted Origins for Render
CSRF_TRUSTED_ORIGINS = [
    'https://kapadiahighschool.com',
    'https://www.kapadiahighschool.com',
    'https://*.onrender.com',
    'https://test-p769.onrender.com',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'khschool',
    'khschool.templatetags',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add whitenoise for static files
    # Cache middleware - add these at the top after security and whitenoise
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'kapadiaschool.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'kapadiaschool.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Robust database configuration: use DATABASE_URL if valid; otherwise fallback to SQLite
raw_db_url = os.environ.get('DATABASE_URL', '').strip()

if raw_db_url:
    is_postgres_url = raw_db_url.startswith(('postgres://', 'postgresql://', 'postgis://', 'pgsql://'))
    DATABASES = {
        'default': dj_database_url.parse(
            raw_db_url,
            conn_max_age=600,
            ssl_require=is_postgres_url
        )
    }
else:
    print("DATABASE_URL is not set or empty. Using SQLite for local/development.")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# Supabase configuration
SUPABASE_URL = os.environ.get('SUPABASE_URL', '')
SUPABASE_KEY = os.environ.get('SUPABASE_KEY', '')
USE_SUPABASE_STORAGE = bool(SUPABASE_URL and SUPABASE_KEY)

# Media files (uploads)
MEDIA_ROOT = os.path.join(BASE_DIR, 'gallery')
MEDIA_URL = '/gallery/'

# Configure media storage
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

# Log Supabase status
if USE_SUPABASE_STORAGE:
    print(f"Supabase URL: {SUPABASE_URL[:10]}...")
    print(f"Supabase Key: {SUPABASE_KEY[:10]}...")
    print("Supabase storage is enabled")
else:
    print("WARNING: Supabase storage is not configured. Using local file storage only.")
    print("Set SUPABASE_URL and SUPABASE_KEY environment variables to enable Supabase storage.")

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Configure static file storage for production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Enable WhiteNoise compression and caching support
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Cache settings for better performance
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Cache middleware settings
CACHE_MIDDLEWARE_SECONDS = 60 * 15  # 15 minutes
CACHE_MIDDLEWARE_KEY_PREFIX = 'kapadiaschool'

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

# Template caching
TEMPLATE_LOADERS = [
    ('django.template.loaders.cached.Loader', [
        'django.template.loaders.filesystem.Loader',
        'django.template.loaders.app_directories.Loader',
    ]),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Cron job security
CRON_SECRET_KEY = os.environ.get('CRON_SECRET_KEY', 'change-this-secret-key-in-production')
